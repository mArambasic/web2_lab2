<%- include('partials/header') -%>

<style>
    input[type="text"] {
        border: 1px solid #000000;
        padding: 5px;
    }

    .hint-box {
        margin-top: 10px;
        padding: 10px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
    }
    #loginBtn:disabled {
        background-color: #861717;
        color: #666666;
        cursor: not-allowed;
    }
</style>

<h1 class="text-4xl">Broken Authentication</h1>
<br>
<p>Different authentication vulnerabilities will be displayed for user login and user registration.</p>
<p>Note: both the login and registration will not be entering data to a database, instead they will be using dummy login and registration functions to display vulnerabilities</p>
<br>

<div class="hint-box">
    <p>LOGIN</p>
    <p>Pressing the "Enable vulnerability" checkbox disables the following security measures:</p>
    <p>1) Limiting login attempts</p>
    <p>2) Non-specific alerts on failed login attempts (example: "No user found" instead of "Incorrect username")</p>
    <br>
    <p>Note for dummy login data:</p>
    <p> - login will be succesful if username = test and password = testPassword</p>
</div>
<br>

<form onsubmit="return login()">
    <input type="checkbox" name="unsafe" id="unsafeCheckbox"> Enable vulnerabilities
    <br> 
    Username: <input type="text" name="username" id="username"> <br>
    Password: <input type="text" name="password" id="password"> <br> 
    <input type="submit" value="LOGIN" id="loginBtn">
</form>

<br> <br> 
<div class="hint-box">
    <p>REGISTRATION</p>
    <p>Pressing the "Enable vulnerability" checkbox disables the following security measures:</p>
    <p>1) Minimum and maximum password length</p>
    <p>2) Using hash and salt</p>
</div>
<br>

<form onsubmit="return registration()">
    <input type="checkbox" name="unsafe" id="unsafeCheckboxRegistration"> Enable vulnerabilities
    <br> 
    Username: <input type="text" name="username" id="usernameRegistration"> <br>
    Password: <input type="text" name="password" id="passwordRegistration"> <br> 
    <input type="submit" value="REGISTRATION" id="registrationBtn">
</form>

<script>
    var loginAttempts = localStorage.getItem('loginAttempts');
    if (loginAttempts === null) {
        loginAttempts = 0;
        localStorage.setItem('loginAttempts', loginAttempts);
    }

    function login() {
        var unsafeCheckbox = document.getElementById("unsafeCheckbox");
        if (unsafeCheckbox.checked) {
            login_unsafe();
        } else {
            login_safe();
        }
        return false; 
    }

    function login_unsafe() {
        console.log("login unsafe");

        localStorage.setItem('loginAttempts', 0);

        alert(tryLogin());
    }

    function login_safe() {
        console.log("login safe");

        var currentAttempts = localStorage.getItem('loginAttempts');
        localStorage.setItem('loginAttempts', ++currentAttempts);

        var loginSuccess = tryLogin() === "login success";

        var loginBtn = document.getElementById("loginBtn");
        if (!loginSuccess) {
            console.log("login attempts: " + currentAttempts)

            if (currentAttempts >= 5) {
                alert("Too many failed login attempts. Please wait 30 seconds before trying again.");

                loginBtn.disabled = true;

                setTimeout(function () {
                    loginBtn.disabled = false;
                    localStorage.setItem('loginAttempts', 0);
                }, 30000);
            } else {
                localStorage.setItem('loginAttempts', 0);
                alert("No user found");
            }
        } else {
            alert("Login success");
        }
    }
           

    function tryLogin() {
        // not logging in, just using the function to show different vulnerabilities
        var username = document.getElementById("username").value;
        var password = document.getElementById("password").value;

        console.log("trying to log in");
        console.log(username, password)

        var currentAttempts = localStorage.getItem('loginAttempts');

        if(username === "test" && password === "testPassword") return "login success"
        else if(username != "test" && password === "testPassword") return "incorrect username"
        else if(username === "test" && password != "testPassword") return "incorrect password"
        else return "both the username and the password are incorrect"
    }

    function registration() {
        var unsafeCheckbox = document.getElementById("unsafeCheckboxRegistration");
        if (unsafeCheckbox.checked) {
            registration_unsafe();
        } else {
            registration_safe();
        }
        return false; 
    }

    function registration_unsafe() {
        console.log("registration unsafe");

        var username = document.getElementById("usernameRegistration").value;
        var password = document.getElementById("passwordRegistration").value;
        
        register(username, password);
    }

    function registration_safe() {
        console.log("registration safe");

        const minimumLength = 8;
        const maximumLength = 64;

        var username = document.getElementById("usernameRegistration").value;
        var password = document.getElementById("passwordRegistration").value;
        var passwordLength = password.length;

        if(passwordLength < 8) {
            alert("Password is too short");
            return;
        } else if(passwordLength > 64) {
            alert("Password is too long");
            return;
        }

        register(username, hashPassword(password))
    }

    function register(username, password) {
        alert("Register username: " + username + ", password: " + password)
    }

    function hashPassword(password) {
        //dummy function to show vulnerabilities
        return "5f4dcc3b5aa765d61d8327deb882cf99";
    }
</script>

<%- include('partials/footer') -%>