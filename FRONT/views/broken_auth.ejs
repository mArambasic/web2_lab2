<%- include('partials/header') -%>

<style>
    input[type="text"] {
        border: 1px solid #000000;
        padding: 5px;
    }

    .hint-box {
        margin-top: 10px;
        padding: 10px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
    }
    #loginBtn:disabled {
        background-color: #861717;
        color: #666666;
        cursor: not-allowed;
    }
</style>

<h1 class="text-4xl">Broken Authentication</h1>
<br>
<p>Different authentication vulnerabilities will be displayed for user login and user registration.</p>
<p>Note: both the login and registration will not be entering data to a database, instead they will be using dummy login and registration functions to display vulnerabilities</p>
<br>

<div class="hint-box">
    <p>LOGIN</p>
    <p>Pressing the "Enable vulnerability" checkbox disables the following security measures:</p>
    <p>1) Limiting login attempts</p>
    <p>2) Non-specific alerts on failed login attempts (example: "No user found" instead of "Incorrect username")</p>
    <p>Note for dummy login data</p>
    <p> - login will be successful if username and password are "test"</p>
    <p> - if loginAttempts are divided by 2 it will show incorrect username else it will show incorrect password.</p>
</div>
<br>

<form onsubmit="return login()">
    <input type="checkbox" name="unsafe" id="unsafeCheckbox"> Enable vulnerability
    <br>  <br>
    Username: <input type="text" name="username" id="username"> <br>
    Password: <input type="text" name="password" id="password"> <br> <br>
    <input type="submit" value="LOGIN" id="loginBtn">
</form>

<div class="hint-box">
    <p>REGISTRATION</p>
    <p>Pressing the "Enable vulnerability" checkbox disables the following security measures:</p>
    <p>1) Minimum and maximum password length</p>
    <p>2) Using hash and salt</p>
</div>
<br>

<form onsubmit="return registration()">
    <input type="checkbox" name="unsafe" id="unsafeCheckboxRegistration"> Enable vulnerability
    <br>  <br>
    Username: <input type="text" name="username" id="usernameRegistration"> <br>
    Password: <input type="text" name="password" id="passwordRegistration"> <br> <br>
    <input type="submit" value="REGISTRATION" id="registrationBtn">
</form>

<script>
    var loginAttempts = localStorage.getItem('loginAttempts');
    if (loginAttempts === null) {
        loginAttempts = 0;
        localStorage.setItem('loginAttempts', loginAttempts);
    }

    function login() {
        var unsafeCheckbox = document.getElementById("unsafeCheckbox");
        if (unsafeCheckbox.checked) {
            login_unsafe();
        } else {
            login_safe();
        }
        return false; 
    }

    function login_unsafe() {
        var currentAttempts = localStorage.getItem('loginAttempts');
        localStorage.setItem('loginAttempts', ++currentAttempts);

        alert(tryLogin());

        console.log("login unsafe");
    }

    function login_safe() {
        console.log("login safe");

        var currentAttempts = localStorage.getItem('loginAttempts');
        localStorage.setItem('loginAttempts', ++currentAttempts);

        var loginSuccess = tryLogin() !== "incorrect password" && tryLogin() !== "incorrect password";

        console.log(loginSuccess, currentAttempts)

        var loginBtn = document.getElementById("loginBtn");
        if (!loginSuccess) {
            if (currentAttempts >= 5) {
                alert("Too many failed login attempts. Please wait 30 seconds before trying again.");

                loginBtn.disabled = true;

                setTimeout(function () {
                    loginBtn.disabled = false;
                    localStorage.setItem('loginAttempts', 0);
                }, 30000);
            } else {
                alert("No user found");
            }
        } else {
            alert("Login success");
        }
    }
           

    function tryLogin() {
        // not logging in, just using the function to show different vulnerabilities
        var username = document.getElementById("username");
        var password = document.getElementById("password");

        console.log("trying to log in");

        var currentAttempts = localStorage.getItem('loginAttempts');
        if(username === "test" && password === "test") {
            localStorage.setItem('loginAttempts', 0);
            return "login success"
        } else if(currentAttempts % 2 == 0) return "incorrect username"
        else return "incorrect password"
    }

    function registration() {
        var unsafeCheckbox = document.getElementById("unsafeCheckboxRegistration");
        if (unsafeCheckbox.checked) {
            registration_unsafe();
        } else {
            registration_safe();
        }
        return false; 
    }

    function registration_unsafe() {
        var username = document.getElementById("usernameRegistration");
        var password = document.getElementById("passwordRegistration");
        
        register(username, hashedPassword);
    }

    function registration_safe() {
        const bcrypt = require('bcrypt');
        const saltRounds = 10;
        const minimumLength = 8;
        const maximumLength = 64;

        var username = document.getElementById("usernameRegistration");
        var password = document.getElementById("passwordRegistration");
        var passwordLength = password.length;

        if(passwordLength < 8) {
            alert("Password is too short");
            return;
        } else if(passwordLength > 64) {
            alert("Password is too long");
            return;
        }

        hashPassword(originalPassword)
        .then((hashedPassword) => {
            register(username, hashedPassword);
        })
        .catch((error) => {
            console.error('Hashing Error:', error);
        });
       
    }

    function register(username, password) {
        alert("Register username: " + username + ", password: " + password)
    }

    async function hashPassword(password) {
        const salt = await bcrypt.genSalt(saltRounds);
        const hash = await bcrypt.hash(password, salt);
        return hash;
    }
</script>

<%- include('partials/footer') -%>