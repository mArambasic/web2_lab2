<%- include('partials/header') -%>

<style>
    input[type="text"] {
        border: 1px solid #000000;
        padding: 5px;
    }

    .hint-box {
        margin-top: 10px;
        padding: 10px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
    }
    #loginBtn:disabled {
        background-color: #861717;
        color: #666666;
        cursor: not-allowed;
    }
</style>

<script src="https://www.google.com/recaptcha/enterprise.js?render=6LePiAwpAAAAAPE9DB8P6F0k442T2Kbtc7O6JJ63" async defer></script>
<script src="https://www.gstatic.com/recaptcha/releases/enterprise.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@google-cloud/recaptcha-enterprise"></script>

<h1 class="text-4xl">Broken Authentication</h1>
<br>

<div class="hint-box">
    <p>Pressing the "Enable vulnerability" checkbox disables the following security measures:</p>
    <p>1) Limiting login attempts</p>
    <p>2) Not ignoring captcha</p>
    <p>3) Non-specific alerts on failed login attempts (example: "No user found" instead of "Incorrect username")</p>
</div>
<br>

<form onsubmit="return login()">
    <input type="checkbox" name="unsafe" id="unsafeCheckbox"> Enable vulnerability
    <br>  <br>
    Username: <input type="text" name="username" id="username"> <br>
    Password: <input type="text" name="password" id="password"> <br> <br>
    <div id="recaptchaContainer"></div>
    <br>
    <input type="submit" value="LOGIN" id="loginBtn">
</form>

<script>
    var loginAttempts = localStorage.getItem('loginAttempts');
    if (loginAttempts === null) {
        loginAttempts = 0;
        localStorage.setItem('loginAttempts', loginAttempts);
    }

    function login() {
        var unsafeCheckbox = document.getElementById("unsafeCheckbox");
        if (unsafeCheckbox.checked) {
            login_unsafe();
        } else {
            login_safe();
        }
        return false; 
    }

    function login_unsafe() {
        var currentAttempts = localStorage.getItem('loginAttempts');
        localStorage.setItem('loginAttempts', ++currentAttempts);

        alert(tryLogin());

        console.log("login unsafe");
    }

    function login_safe() {
        console.log("login safe");

        var currentAttempts = localStorage.getItem('loginAttempts');
        localStorage.setItem('loginAttempts', ++currentAttempts);

        grecaptcha.enterprise.execute('6LePiAwpAAAAAPE9DB8P6F0k442T2Kbtc7O6JJ63', { action: 'login' })
            .then(function (recaptchaToken) {
                console.log('reCAPTCHA Token:', recaptchaToken);

                var loginSuccess = tryLogin() !== "incorrect password" && tryLogin() !== "incorrect password";

                console.log(loginSuccess, currentAttempts)

                var loginBtn = document.getElementById("loginBtn");
                if (!loginSuccess && currentAttempts >= 5) {
                    if (currentAttempts >= 5) {
                        alert("Too many failed login attempts. Please wait 30 seconds before trying again.");

                        loginBtn.disabled = true;

                        setTimeout(function () {
                            loginBtn.disabled = false;
                            localStorage.setItem('loginAttempts', 0);
                        }, 30000);
                    } else {
                        alert("No user found");
                    }
                }

                // Call createAssessment after a successful login attempt
                createAssessment({
                    projectID: "web2lab2-1699824097556",
                    recaptchaKey: "6LePiAwpAAAAAPE9DB8P6F0k442T2Kbtc7O6JJ63",
                    token: recaptchaToken,
                    recaptchaAction: 'login'
                });
            })
            .catch(function (error) {
                console.error('reCAPTCHA Error:', error);
            });

    }

    function tryLogin() {
        // not logging in, just using the function to show different vulnerabilities
        var username = document.getElementById("username");
        var password = document.getElementById("password");

        console.log("trying to log in");

        var currentAttempts = localStorage.getItem('loginAttempts');
        if(currentAttempts % 2 == 0) return "incorrect username"
        else if(username === "test") {
            localStorage.setItem('loginAttempts', 0);
            return "found user"
        }
        else return "incorrect password"
    }
</script>

<script>
    const { RecaptchaEnterpriseServiceClient } = require('@google-cloud/recaptcha-enterprise');

    async function createAssessment({
      projectID = "web2lab2-1699824097556",
      recaptchaKey = "6LePiAwpAAAAAPE9DB8P6F0k442T2Kbtc7O6JJ63",
      token = "action-token",
      recaptchaAction = "action-name",
    }) {
      const client = new RecaptchaEnterpriseServiceClient();
      const projectPath = client.projectPath(projectID);

      const request = {
        assessment: {
          event: {
            token: token,
            siteKey: recaptchaKey,
          },
        },
        parent: projectPath,
      };

      const [ response ] = await client.createAssessment(request);

      if (!response.tokenProperties.valid) {
        console.log(`The CreateAssessment call failed because the token was: ${response.tokenProperties.invalidReason}`);
        return null;
      }

      if (response.tokenProperties.action === recaptchaAction) {
        console.log(`The reCAPTCHA score is: ${response.riskAnalysis.score}`);
        response.riskAnalysis.reasons.forEach((reason) => {
          console.log(reason);
        });

        return response.riskAnalysis.score;
      } else {
        console.log("The action attribute in your reCAPTCHA tag does not match the action you are expecting to score");
        return null;
      }
    }
</script>

<%- include('partials/footer') -%>
